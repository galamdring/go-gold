// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/galamdring/go-gold/ent/account"
	"github.com/galamdring/go-gold/ent/budget"
	"github.com/galamdring/go-gold/ent/predicate"
	"github.com/galamdring/go-gold/ent/schema"
	"github.com/galamdring/go-gold/ent/transaction"
	"github.com/galamdring/go-gold/ent/user"
)

// BudgetUpdate is the builder for updating Budget entities.
type BudgetUpdate struct {
	config
	hooks    []Hook
	mutation *BudgetMutation
}

// Where appends a list predicates to the BudgetUpdate builder.
func (bu *BudgetUpdate) Where(ps ...predicate.Budget) *BudgetUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BudgetUpdate) SetName(s string) *BudgetUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BudgetUpdate) SetNillableName(s *string) *BudgetUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetAmount sets the "amount" field.
func (bu *BudgetUpdate) SetAmount(s schema.Decimal) *BudgetUpdate {
	bu.mutation.SetAmount(s)
	return bu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bu *BudgetUpdate) SetNillableAmount(s *schema.Decimal) *BudgetUpdate {
	if s != nil {
		bu.SetAmount(*s)
	}
	return bu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BudgetUpdate) SetUserID(id int) *BudgetUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bu *BudgetUpdate) SetNillableUserID(id *int) *BudgetUpdate {
	if id != nil {
		bu = bu.SetUserID(*id)
	}
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BudgetUpdate) SetUser(u *User) *BudgetUpdate {
	return bu.SetUserID(u.ID)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (bu *BudgetUpdate) AddAccountIDs(ids ...int) *BudgetUpdate {
	bu.mutation.AddAccountIDs(ids...)
	return bu
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (bu *BudgetUpdate) AddAccounts(a ...*Account) *BudgetUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.AddAccountIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (bu *BudgetUpdate) AddTransactionIDs(ids ...int) *BudgetUpdate {
	bu.mutation.AddTransactionIDs(ids...)
	return bu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (bu *BudgetUpdate) AddTransactions(t ...*Transaction) *BudgetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.AddTransactionIDs(ids...)
}

// Mutation returns the BudgetMutation object of the builder.
func (bu *BudgetUpdate) Mutation() *BudgetMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BudgetUpdate) ClearUser() *BudgetUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (bu *BudgetUpdate) ClearAccounts() *BudgetUpdate {
	bu.mutation.ClearAccounts()
	return bu
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (bu *BudgetUpdate) RemoveAccountIDs(ids ...int) *BudgetUpdate {
	bu.mutation.RemoveAccountIDs(ids...)
	return bu
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (bu *BudgetUpdate) RemoveAccounts(a ...*Account) *BudgetUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.RemoveAccountIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (bu *BudgetUpdate) ClearTransactions() *BudgetUpdate {
	bu.mutation.ClearTransactions()
	return bu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (bu *BudgetUpdate) RemoveTransactionIDs(ids ...int) *BudgetUpdate {
	bu.mutation.RemoveTransactionIDs(ids...)
	return bu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (bu *BudgetUpdate) RemoveTransactions(t ...*Transaction) *BudgetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BudgetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BudgetUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BudgetUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BudgetUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BudgetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(budget.Table, budget.Columns, sqlgraph.NewFieldSpec(budget.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(budget.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Amount(); ok {
		_spec.SetField(budget.FieldAmount, field.TypeOther, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.AccountsTable,
			Columns: []string{budget.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !bu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.AccountsTable,
			Columns: []string{budget.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.AccountsTable,
			Columns: []string{budget.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.TransactionsTable,
			Columns: []string{budget.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !bu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.TransactionsTable,
			Columns: []string{budget.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.TransactionsTable,
			Columns: []string{budget.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{budget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BudgetUpdateOne is the builder for updating a single Budget entity.
type BudgetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BudgetMutation
}

// SetName sets the "name" field.
func (buo *BudgetUpdateOne) SetName(s string) *BudgetUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BudgetUpdateOne) SetNillableName(s *string) *BudgetUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetAmount sets the "amount" field.
func (buo *BudgetUpdateOne) SetAmount(s schema.Decimal) *BudgetUpdateOne {
	buo.mutation.SetAmount(s)
	return buo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (buo *BudgetUpdateOne) SetNillableAmount(s *schema.Decimal) *BudgetUpdateOne {
	if s != nil {
		buo.SetAmount(*s)
	}
	return buo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BudgetUpdateOne) SetUserID(id int) *BudgetUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (buo *BudgetUpdateOne) SetNillableUserID(id *int) *BudgetUpdateOne {
	if id != nil {
		buo = buo.SetUserID(*id)
	}
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BudgetUpdateOne) SetUser(u *User) *BudgetUpdateOne {
	return buo.SetUserID(u.ID)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (buo *BudgetUpdateOne) AddAccountIDs(ids ...int) *BudgetUpdateOne {
	buo.mutation.AddAccountIDs(ids...)
	return buo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (buo *BudgetUpdateOne) AddAccounts(a ...*Account) *BudgetUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.AddAccountIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (buo *BudgetUpdateOne) AddTransactionIDs(ids ...int) *BudgetUpdateOne {
	buo.mutation.AddTransactionIDs(ids...)
	return buo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (buo *BudgetUpdateOne) AddTransactions(t ...*Transaction) *BudgetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.AddTransactionIDs(ids...)
}

// Mutation returns the BudgetMutation object of the builder.
func (buo *BudgetUpdateOne) Mutation() *BudgetMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BudgetUpdateOne) ClearUser() *BudgetUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (buo *BudgetUpdateOne) ClearAccounts() *BudgetUpdateOne {
	buo.mutation.ClearAccounts()
	return buo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (buo *BudgetUpdateOne) RemoveAccountIDs(ids ...int) *BudgetUpdateOne {
	buo.mutation.RemoveAccountIDs(ids...)
	return buo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (buo *BudgetUpdateOne) RemoveAccounts(a ...*Account) *BudgetUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.RemoveAccountIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (buo *BudgetUpdateOne) ClearTransactions() *BudgetUpdateOne {
	buo.mutation.ClearTransactions()
	return buo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (buo *BudgetUpdateOne) RemoveTransactionIDs(ids ...int) *BudgetUpdateOne {
	buo.mutation.RemoveTransactionIDs(ids...)
	return buo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (buo *BudgetUpdateOne) RemoveTransactions(t ...*Transaction) *BudgetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the BudgetUpdate builder.
func (buo *BudgetUpdateOne) Where(ps ...predicate.Budget) *BudgetUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BudgetUpdateOne) Select(field string, fields ...string) *BudgetUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Budget entity.
func (buo *BudgetUpdateOne) Save(ctx context.Context) (*Budget, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BudgetUpdateOne) SaveX(ctx context.Context) *Budget {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BudgetUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BudgetUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BudgetUpdateOne) sqlSave(ctx context.Context) (_node *Budget, err error) {
	_spec := sqlgraph.NewUpdateSpec(budget.Table, budget.Columns, sqlgraph.NewFieldSpec(budget.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Budget.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, budget.FieldID)
		for _, f := range fields {
			if !budget.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != budget.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(budget.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Amount(); ok {
		_spec.SetField(budget.FieldAmount, field.TypeOther, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.AccountsTable,
			Columns: []string{budget.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !buo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.AccountsTable,
			Columns: []string{budget.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.AccountsTable,
			Columns: []string{budget.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.TransactionsTable,
			Columns: []string{budget.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !buo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.TransactionsTable,
			Columns: []string{budget.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.TransactionsTable,
			Columns: []string{budget.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Budget{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{budget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
