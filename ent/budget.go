// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/galamdring/go-gold/ent/budget"
	"github.com/galamdring/go-gold/ent/user"
)

// Budget is the model entity for the Budget schema.
type Budget struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BudgetQuery when eager-loading is set.
	Edges        BudgetEdges `json:"edges"`
	user_budgets *int
	selectValues sql.SelectValues
}

// BudgetEdges holds the relations/edges for other nodes in the graph.
type BudgetEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Accounts holds the value of the accounts edge.
	Accounts []*Account `json:"accounts,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BudgetEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e BudgetEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[1] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e BudgetEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[2] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Budget) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case budget.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case budget.FieldID:
			values[i] = new(sql.NullInt64)
		case budget.FieldName:
			values[i] = new(sql.NullString)
		case budget.ForeignKeys[0]: // user_budgets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Budget fields.
func (b *Budget) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case budget.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case budget.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case budget.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				b.Amount = value.Float64
			}
		case budget.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_budgets", value)
			} else if value.Valid {
				b.user_budgets = new(int)
				*b.user_budgets = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Budget.
// This includes values selected through modifiers, order, etc.
func (b *Budget) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Budget entity.
func (b *Budget) QueryUser() *UserQuery {
	return NewBudgetClient(b.config).QueryUser(b)
}

// QueryAccounts queries the "accounts" edge of the Budget entity.
func (b *Budget) QueryAccounts() *AccountQuery {
	return NewBudgetClient(b.config).QueryAccounts(b)
}

// QueryTransactions queries the "transactions" edge of the Budget entity.
func (b *Budget) QueryTransactions() *TransactionQuery {
	return NewBudgetClient(b.config).QueryTransactions(b)
}

// Update returns a builder for updating this Budget.
// Note that you need to call Budget.Unwrap() before calling this method if this Budget
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Budget) Update() *BudgetUpdateOne {
	return NewBudgetClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Budget entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Budget) Unwrap() *Budget {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Budget is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Budget) String() string {
	var builder strings.Builder
	builder.WriteString("Budget(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", b.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// Budgets is a parsable slice of Budget.
type Budgets []*Budget
