// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/galamdring/go-gold/ent/account"
	"github.com/galamdring/go-gold/ent/budget"
	"github.com/galamdring/go-gold/ent/transaction"
	"github.com/galamdring/go-gold/ent/user"
)

// BudgetCreate is the builder for creating a Budget entity.
type BudgetCreate struct {
	config
	mutation *BudgetMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BudgetCreate) SetName(s string) *BudgetCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetAmount sets the "amount" field.
func (bc *BudgetCreate) SetAmount(f float64) *BudgetCreate {
	bc.mutation.SetAmount(f)
	return bc
}

// SetID sets the "id" field.
func (bc *BudgetCreate) SetID(i int) *BudgetCreate {
	bc.mutation.SetID(i)
	return bc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bc *BudgetCreate) SetUserID(id int) *BudgetCreate {
	bc.mutation.SetUserID(id)
	return bc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bc *BudgetCreate) SetNillableUserID(id *int) *BudgetCreate {
	if id != nil {
		bc = bc.SetUserID(*id)
	}
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BudgetCreate) SetUser(u *User) *BudgetCreate {
	return bc.SetUserID(u.ID)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (bc *BudgetCreate) AddAccountIDs(ids ...int) *BudgetCreate {
	bc.mutation.AddAccountIDs(ids...)
	return bc
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (bc *BudgetCreate) AddAccounts(a ...*Account) *BudgetCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bc.AddAccountIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (bc *BudgetCreate) AddTransactionIDs(ids ...int) *BudgetCreate {
	bc.mutation.AddTransactionIDs(ids...)
	return bc
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (bc *BudgetCreate) AddTransactions(t ...*Transaction) *BudgetCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bc.AddTransactionIDs(ids...)
}

// Mutation returns the BudgetMutation object of the builder.
func (bc *BudgetCreate) Mutation() *BudgetMutation {
	return bc.mutation
}

// Save creates the Budget in the database.
func (bc *BudgetCreate) Save(ctx context.Context) (*Budget, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BudgetCreate) SaveX(ctx context.Context) *Budget {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BudgetCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BudgetCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BudgetCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Budget.name"`)}
	}
	if _, ok := bc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Budget.amount"`)}
	}
	return nil
}

func (bc *BudgetCreate) sqlSave(ctx context.Context) (*Budget, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BudgetCreate) createSpec() (*Budget, *sqlgraph.CreateSpec) {
	var (
		_node = &Budget{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(budget.Table, sqlgraph.NewFieldSpec(budget.FieldID, field.TypeInt))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(budget.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.Amount(); ok {
		_spec.SetField(budget.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_budgets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.AccountsTable,
			Columns: []string{budget.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   budget.TransactionsTable,
			Columns: []string{budget.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BudgetCreateBulk is the builder for creating many Budget entities in bulk.
type BudgetCreateBulk struct {
	config
	err      error
	builders []*BudgetCreate
}

// Save creates the Budget entities in the database.
func (bcb *BudgetCreateBulk) Save(ctx context.Context) ([]*Budget, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Budget, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BudgetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BudgetCreateBulk) SaveX(ctx context.Context) []*Budget {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BudgetCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BudgetCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
